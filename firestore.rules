rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ============================================
    // Helper Functions
    // ============================================

    /// Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    /// Check if user is a member of the specified group
    function isGroupMember(groupId) {
      return isAuthenticated() &&
             request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberIds;
    }

    /// Check if user is an admin of the specified group
    function isGroupAdmin(groupId) {
      return isAuthenticated() &&
             request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.adminIds;
    }

    // ============================================
    // User Documents
    // ============================================

    // Users can read and write their own user document
    match /users/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;

      // User preferences subcollection - users can read/write their own preferences
      match /preferences/{preferenceId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
      }

      // User invitations subcollection (Story 2.3)
      match /invitations/{invitationId} {
        // Only group admins can create invitations
        allow create: if isAuthenticated() &&
                         isGroupAdmin(request.resource.data.groupId);

        // Only the invited user can read their invitations
        allow read: if isAuthenticated() && request.auth.uid == userId;

        // Only the invited user can update invitation status (accept/decline)
        allow update: if isAuthenticated() &&
                         request.auth.uid == userId &&
                         request.resource.data.status in ['accepted', 'declined'] &&
                         // Ensure core fields cannot be modified
                         request.resource.data.groupId == resource.data.groupId &&
                         request.resource.data.invitedBy == resource.data.invitedBy;

        // Only the invited user or the inviter can delete invitations
        allow delete: if isAuthenticated() &&
                         (request.auth.uid == userId ||
                          request.auth.uid == resource.data.invitedBy);
      }
    }

    // ============================================
    // Groups
    // ============================================

    // Groups: Members can read, admins can write
    match /groups/{groupId} {
      // Allow reading individual group documents if user is a member
      allow get: if isAuthenticated() &&
                    (request.auth.uid in resource.data.memberIds ||
                     request.auth.uid == resource.data.createdBy);

      // Allow listing/querying groups - user can query for groups they're members of
      // This is needed for .where('memberIds', arrayContains: userId) queries
      allow list: if isAuthenticated();

      // Only authenticated users can create groups
      // Creator must be in members and admins arrays
      allow create: if isAuthenticated() &&
                       request.auth.uid == request.resource.data.createdBy &&
                       request.auth.uid in request.resource.data.memberIds &&
                       request.auth.uid in request.resource.data.adminIds;

      // Only admins can update groups
      // Ensure admins array is never empty
      allow update: if isAuthenticated() &&
                       request.auth.uid in resource.data.adminIds &&
                       request.resource.data.adminIds.size() > 0;

      // Only admins can delete groups
      allow delete: if isAuthenticated() &&
                       request.auth.uid in resource.data.adminIds;
    }

    // Games: Group members can read, creators can write
    match /games/{gameId} {
      allow read: if request.auth != null &&
                     request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.members;
      allow create: if request.auth != null &&
                       request.auth.uid == request.resource.data.createdBy;
      allow update: if request.auth != null &&
                       (request.auth.uid == resource.data.createdBy ||
                        request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.members);
      allow delete: if request.auth != null &&
                       request.auth.uid == resource.data.createdBy;
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
