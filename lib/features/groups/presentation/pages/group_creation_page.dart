import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:play_with_me/core/data/models/group_model.dart';
import 'package:play_with_me/core/presentation/bloc/group/group_bloc.dart';
import 'package:play_with_me/core/presentation/bloc/group/group_event.dart';
import 'package:play_with_me/core/presentation/bloc/group/group_state.dart';
import 'package:play_with_me/features/auth/presentation/bloc/authentication/authentication_bloc.dart';
import 'package:play_with_me/features/auth/presentation/bloc/authentication/authentication_state.dart';

class GroupCreationPage extends StatefulWidget {
  const GroupCreationPage({super.key});

  @override
  State<GroupCreationPage> createState() => _GroupCreationPageState();
}

class _GroupCreationPageState extends State<GroupCreationPage> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _descriptionController = TextEditingController();

  @override
  void dispose() {
    _nameController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }

  String? _validateGroupName(String? value) {
    if (value == null || value.trim().isEmpty) {
      return 'Group name cannot be empty';
    }
    if (value.trim().length < 3) {
      return 'Group name must be at least 3 characters';
    }
    return null;
  }

  void _handleCreateGroup(BuildContext context, String userId) {
    if (!_formKey.currentState!.validate()) {
      return;
    }

    final groupName = _nameController.text.trim();
    final description = _descriptionController.text.trim();

    final now = DateTime.now();
    final newGroup = GroupModel(
      id: '', // Will be generated by Firestore
      name: groupName,
      description: description.isEmpty ? null : description,
      createdBy: userId,
      createdAt: now,
      memberIds: [userId], // Creator automatically becomes first member
      adminIds: [userId], // Creator automatically becomes first admin
      lastActivity: now, // Set initial activity to creation time
    );

    context.read<GroupBloc>().add(CreateGroup(group: newGroup));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Create Group'),
        centerTitle: true,
      ),
      body: BlocConsumer<GroupBloc, GroupState>(
        listener: (context, state) {
          if (state is GroupCreated) {
            // Show success message
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(
                content: Text('Group created successfully!'),
                backgroundColor: Colors.green,
                duration: Duration(seconds: 2),
              ),
            );

            // Navigate back after short delay
            Future.delayed(const Duration(milliseconds: 500), () {
              if (context.mounted) {
                Navigator.of(context).pop(state.group);
              }
            });
          } else if (state is GroupError) {
            // Show error message
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('Failed to create group: ${state.message}'),
                backgroundColor: Colors.red,
                duration: const Duration(seconds: 3),
              ),
            );
          }
        },
        builder: (context, groupState) {
          final isLoading = groupState is GroupLoading;

          return BlocBuilder<AuthenticationBloc, AuthenticationState>(
            builder: (context, authState) {
              if (authState is! AuthenticationAuthenticated) {
                return const Center(
                  child: Text('You must be logged in to create a group'),
                );
              }

              return SingleChildScrollView(
                padding: const EdgeInsets.all(16.0),
                child: Form(
                  key: _formKey,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      // Header text
                      const Text(
                        'Create a new group for organizing volleyball games',
                        style: TextStyle(
                          fontSize: 16,
                          color: Colors.grey,
                        ),
                        textAlign: TextAlign.center,
                      ),
                      const SizedBox(height: 24),

                      // Group name field
                      TextFormField(
                        controller: _nameController,
                        enabled: !isLoading,
                        decoration: const InputDecoration(
                          labelText: 'Group Name *',
                          hintText: 'e.g., Beach Volleyball Crew',
                          prefixIcon: Icon(Icons.group),
                          border: OutlineInputBorder(),
                          helperText: 'Choose a name for your group (min 3 characters)',
                        ),
                        validator: _validateGroupName,
                        textCapitalization: TextCapitalization.words,
                        maxLength: 50,
                        autofocus: true,
                      ),
                      const SizedBox(height: 16),

                      // Description field (optional)
                      TextFormField(
                        controller: _descriptionController,
                        enabled: !isLoading,
                        decoration: const InputDecoration(
                          labelText: 'Description (Optional)',
                          hintText: 'e.g., Weekly beach volleyball games at Santa Monica',
                          prefixIcon: Icon(Icons.description),
                          border: OutlineInputBorder(),
                          helperText: 'Add a description to help others understand your group',
                          alignLabelWithHint: true,
                        ),
                        maxLines: 3,
                        maxLength: 200,
                        textCapitalization: TextCapitalization.sentences,
                      ),
                      const SizedBox(height: 24),

                      // Info card
                      Card(
                        color: Colors.blue.shade50,
                        child: Padding(
                          padding: const EdgeInsets.all(12.0),
                          child: Row(
                            children: [
                              Icon(Icons.info_outline, color: Colors.blue.shade700),
                              const SizedBox(width: 12),
                              Expanded(
                                child: Text(
                                  'You will automatically become the group admin and first member',
                                  style: TextStyle(
                                    color: Colors.blue.shade900,
                                    fontSize: 14,
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                      const SizedBox(height: 32),

                      // Create button
                      FilledButton.icon(
                        onPressed: isLoading
                            ? null
                            : () => _handleCreateGroup(context, authState.user.uid),
                        icon: isLoading
                            ? const SizedBox(
                                width: 20,
                                height: 20,
                                child: CircularProgressIndicator(
                                  strokeWidth: 2,
                                  color: Colors.white,
                                ),
                              )
                            : const Icon(Icons.add),
                        label: Text(isLoading ? 'Creating...' : 'Create Group'),
                        style: FilledButton.styleFrom(
                          padding: const EdgeInsets.symmetric(vertical: 16),
                        ),
                      ),
                      const SizedBox(height: 16),

                      // Cancel button
                      OutlinedButton(
                        onPressed: isLoading ? null : () => Navigator.of(context).pop(),
                        style: OutlinedButton.styleFrom(
                          padding: const EdgeInsets.symmetric(vertical: 16),
                        ),
                        child: const Text('Cancel'),
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        },
      ),
    );
  }
}
